**DISCLAIMER: We've tried to stick to the description to the best of our abilities. This documentations explains our understanding and design decisions. 

Our code is implemented in MySQL and we ran our queries on MySQL 5.7 


==> SYSTEM USER: 
* search_school: selects any school with the given name or type or address. 
* 

==> SYSTEM ADMINISTRATOR: 
* create_school: create school with all given attributes

* create_admin: we assume that this procedure can be used by both the system admin and school admin to create admins. 

* add_level_school: adding level to a certain school since level is a multi-values attribute

* add_school_phone: adding school to Phone_School since phone is multi-values attribute

* create_course: creates course

* add_course_prerequisite(pre_code, code): adds the course with code "pre_code" as prerequisite to the course with code "code"

* create_admin: adds school administrator to the database

* add_admin_to_school(admin_id, school_name): adds admin to specified school. 

N.B. The description is not clear on whether creating an admin and adding him/her to a school should be done in one procedure. So we decided to implement two separate procedures. 

* delete_school: deletes the record of the school from the Schools table, and sets the values of the usernames and passowrds of its students and employees to NULL. 

* search_school: The description is not very clear on this part. We decided to search for any school which maches the input name, type or address. 

* view_school_info: Selects all information about the school with the input id. 

* admin_assign_teacher_to_course: assigns the teacher to the ternary relationship Course_Teacher_Student for which the student's school id matches the admin's school id

==> SCHOOL ADMINISTRATOR: 
*view_school(school_id): takes school id, selects all relevent information about school from the database

*view_applied_teacher(admin_id): takes the admin's id and shows all teachers whose IDs are null and are related to his/her school. We assume that when a teacher is first created, his/her username and password are set to null until verified by an admin. 

*verify_applied_teacher(teacher_id, username_in, password_in): used by an admin to manually assign a username and password to a teacher who has started working at his/her school. We update the start_date of a teacher only if it were originally null, meaning that this is his/her first job. 

* view_applied_students: selects all students who have applied to the admin's school

* verify_applied_student: assigns username and password to enrolled student and also assigns to him/her an ID that is unique within the school. 

*delete_employee(emp_id): we assume that the admin of a school has no authority to delete an employee from the database completely. He/she can only "delete" the employee from his/her school's system by setting their school_id, username and passwod to null. 

*delete_student(student_id): same as delete_employee

*edit_school_[column]: this group of procedures take the admin id and the new value of column they are defined to change and change them. 

* admin_accept_application: changes the status of a student's application from pending to accepted





==> TEACHER: 
*teacher_signup: teacher signs up providing necessary info. We assume the school id provided is the school he/she want to apply in. 



==> Parent: 
* parent_apply_child: this is how the student gets into the database. When a parent applies, we check whether his/her child have been added to the student table before. If not then we add them. Then we apply normally. 
* international_school_with_higher_reputation_than_all_national: selects the internatonal school with number of reviews more than all national schools. 


  